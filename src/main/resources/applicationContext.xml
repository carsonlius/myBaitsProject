<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:property-placeholder location="classpath:jdbc.propertires"></context:property-placeholder>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <property name="filters" value="stat" />

        <property name="maxActive" value="20" />
        <property name="initialSize" value="1" />
        <property name="maxWait" value="60000" />
        <property name="minIdle" value="1" />

        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <property name="poolPreparedStatements" value="true" />
        <property name="maxOpenPreparedStatements" value="20" />

        <property name="asyncInit" value="true" />
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybaits.xml"/>
    </bean>

<!--  dao  -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="basePackage" value="com.carsonlius.dao"/>

    </bean>

<!--   service   -->
    <bean  id="systemLogImpl" class="com.carsonlius.services.SystemLogImpl">
        <property name="systemLogDetailsDao" ref="systemLogDetailsDao"/>
    </bean>

<!--   事务管理器  -->

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
<!--         指定数据库链接-->
        <property name="dataSource" ref="dataSource"/>

    </bean>

    <!--        开启注解事务驱动-->
<!--    <tx:annotation-driven transaction-manager="transactionManager"/>-->

<!--     开启aop事务-->
    <tx:advice id="myAdvice" transaction-manager="transactionManager">
<!--         name 名字全名(不涉及到包和类)
             propagation 传播行为，枚举值
             isolation  mysql隔离级别
             rollback-for 指定会滚的异常类
-->
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" isolation="DEFAULT" rollback-for=""/>
        </tx:attributes>
    </tx:advice>

<!--      配置aop-->
    <aop:config>
<!--   expression切入点表达式 id切入点表达式的名称        -->
        <aop:pointcut id="servicesPt" expression="execution(* *..services..*.*(..))"/>
        
<!--        配置增强器-->
        <aop:advisor advice-ref="myAdvice" pointcut-ref="servicesPt"/>
    </aop:config>    
    
    

</beans>